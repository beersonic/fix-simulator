plugins {
    id("java")
    id("org.springframework.boot") version "$springBootVersion"
    id("io.spring.dependency-management") version "$springDependencyManagementVersion"
    id("com.github.ben-manes.versions") version "$benManesVersion"
    id("com.diffplug.spotless") version "$spotlessVersion"
}

group = "com.beersonic"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

configurations {
    configureEach {
        exclude group: 'ch.qos.logback'
        exclude module: 'logback-classic'
        // Exclude older SLF4J bindings
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'org.slf4j', module: 'slf4j-nop'
        exclude group: 'org.slf4j', module: 'slf4j-simple'
        // Exclude log4j-to-slf4j
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")

    // QuickFIX/J
    implementation("org.quickfixj:quickfixj-core:$quickfixjVersion")
    implementation("org.quickfixj:quickfixj-messages:$quickfixjVersion")

    // Lombok
    implementation("org.projectlombok:lombok:$lombokVersion")
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")

    // Logging
    implementation("org.slf4j:slf4j-api:$slf4jVersion")
    implementation("org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion")
    implementation("org.apache.logging.log4j:log4j-core:$log4jVersion")
    implementation("org.apache.logging.log4j:log4j-api:$log4jVersion")
    implementation("org.springframework.boot:spring-boot-starter-log4j2")

    // Testing
    testImplementation(platform("org.junit:junit-bom:$junitBomVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.mockito:mockito-junit-jupiter:$mockitoVersion")
    testImplementation("org.mockito:mockito-core:$mockitoVersion")
}

tasks.test {
    useJUnitPlatform()
}

spotless {
    java {
        googleJavaFormat()
    }
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

static boolean isNonStable(String version) {
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}